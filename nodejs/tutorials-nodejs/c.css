Adding CSS:
1. Inline Style attribute
<h1 style="color: #98c7d4;">CSS Cross Country</h1>
2. In the <head>
<head> 
<style> 
    h1 { color: #98c7d4; } 
</style> 
</head>
3. External <link>
<head> 
<title>CSS Cross Country</title> 
<link rel="stylesheet" href="styles.css" /> 
    </head>

///////////////////////////////////////

Selectors:
    Element selector 
    Class selector 
    ID selector
    attribute selector

Example:
<h1 class="intro" id="header">Nice and Toasty</h1>

Element selector:
    h1 { 
color: #aba4ac; 
margin-bottom: 10px; 
}

Class selector :
.intro { 
    color: #aba4ac; 
    margin-bottom: 10px; 
}

ID selector:
#header { 
    color: #aba4ac; 
    margin-bottom: 10px; 
}

Compound selectors:

h1#header { 
    color: #aba4ac; 
    margin-bottom: 10px; 
}

Descendent selector: (parent and any child)

<h3>Ingredients</h3>
<ul>
    <li>2 eggs</li>
    <li>1 pound of sugar</li>
    <li>3 sticks of butter</li>
</ul>

ul li {
    font-size: 24px;
}

/* Note: ul(parent) li(child)   */

:Pseudo selector:
some action selection on top of the normal selector.

a:hover {
    color: darkred;
}

ol li:first-child {
    color: red;
}

attribute selector:

input[type=submit] {
    width: 120px;
    font-size: 30px; /* To adjust the height of the input, style the text inside.*/
    border: 2px solid #7facaa; /*  container around an input is actually just a "border", so you can style 
                                    it with the border property.*/
    padding: 7px;    /* use padding to put some space between the border and the text.*/
}


input[type=checkbox], label[for=newsletter] {
    display: inline;
}




Cascade Order
Style priority is determined by position in site: 



    Using  !important
    Inline style attribute 
    In the  <head>  
    External  <link>  

////////////////////////////////////////////////////////////////
Hexadecimal colors: 0 - 255 or 0 - FF
/*
Hexa 74 = (7 x 16) + (4 x 1) = 116 in decimal 

#7403AB
Red:  (7 x 16) + (4 x 1) = 116
Green:  (0 x 16) + (3 x 1) = 3
Blue:  (10 x 16) + (11 x 1) = 171

256 x 256 x 256 = 16,777,216 possible colours (16 millions)

*/

//////////////////////////////////////////////////////////////



block elements:
h1 h2 h3
p  ul li div

By default, starts with new line and end with another new line. Also it takes 100% of page width if there is no explicit width param.

inline elements:
a     img
input label 

NOTE: Eventhough 'a' and 'img' are inline but often they put inside the block element.
ex:


<ul class="photos">
<li> <img src="images/cake1.png" alt="Cake Photo 1"> </li>
<li> <img src="images/cake2.png" alt="Cake Photo 2"> </li>
</ul>


Convert Block to Inline:
ul li {
    display: inline;
}

Ex:
<div class ="myBox"> </div>

.myBox {
    width: 500px; /*Don't take 100% of page default*/
}

Centering element: (2 methods)
1. margin-left:auto; margin-right: auto;
2. text-align: center;

Use method 1 (margin-left:auto; margin-right: auto;):
If element is BLOCK type and FIXED width(NOT 100% default).

Use method 2(text-align: center)
If element(h1) is a child of block elment(div) then center the child element(h1) by text-align: center;

Examples 1:
<body>
    <div class="titleName"> 
        <h1> Recipe World </h1>
    </div>

    <div class="content">
        <h2> chocolate cake </h2>
    </div>
</body>

.content {
    width: 400px;
    /* center the content  by method 1 */
    margin-left: auto; 
    margin-right: auto;
}

.hl {
    /* center the content  by method 2 */
    text-align: center;
}

Examples 2:

<div class="titleName"> 
    <img src="images/logo.png" alt="Recipe World Logo">
</div>

Since <img> is a inline element you can NOT centered using 'text-align'. Instead convert <img> to block element 
and center by margin auto.

.titleName img {
    display: block;
    margin: 0 auto 0 auto;
}

////////////////////////////////////////////////////////////////////////
Types of images supported by HTML:
1. content image / some object image 
2. Layout image / image as a background for the foreground content
3. user interface image / tab and link buttons


1. content image:

<img src="images/logo.png" alt="Recipe World Logo">

2. Layout image:

<div class="featured-image">
</div>

featured-image {
    background-color: #5f5f5f;
    background-image: url(images/pattern.png); /* NO quotes needed */
    background-position: top left;   /* VERTICAL    HORIZONTAL */
    background-repeat: repeat; /* repeat, no-repeat, repeat-x, repeat-y, */
}

VERTICAL options  : top, center, bottom
HORIZONTAL options: left, center, right
    

shortcut:
featured-image {
    background: #5f5f5f url(images/gobbler.png) top left repeat;
}


Standard requirement: Place image(inline) and h1 or p (block) elements one after another (inline).
Use 'float' and either move image to extreme left / right.


<ul class="recipes">
    <li>
    <img src = "cake.png">
    <h3><a href=...>Magic Cake</a></h3>
    <p>...</p>
    </li>
</ul>

.recipes img {
    float: left;
}

/////////////////////////////////////////////////////////////////////////////////////////

Font:

body {
    font-family: Helvetica, Arial, "Times New Roman", sans-serif; 
}

/* NOTE: double quotes only for multi-word */


Resetting default browser font styles:

html, body, h1, h2, 
h3, p, ol, ul, li, a {
    padding: 0;
    border: 0;
    margin: 0;
    font-size: 100%;
    font: inherit;
}

Changing font thickness:

font-weight: bolder; /* bold, bolder, normal. lighter, 100, 200, .... 900 */ 
line-height: 16px;   /* Is like a margin. You can adjust the vertical spacing between line of text */

///////////////////////////////////////////////////////////////////////////////////////////////////////

Form: id and for

'for' attribute in the label makes a linkage to input 'id' attribute by sharing the same name.

<form>
<label for="recipe-name"> Recipe Name</label>
<input id="recipe-name" type="text" >
<input type="submit" value="Click to Submit">
</form>

NOTE: 'for' and 'id' pair share the same name.
NOte: <input> is a empty tag. But <textarea> </textarea> is NOT a empty tag and NO need to define 'type' attribute like 'input'.


Textarea: For <input> you need to use font-size to adjust the 'height' but for textarea you could directly use 'height' attribute.

textarea {
    width: 500px; 
    height: 400px;
    padding: 7px;
    border: 2px solid #7facaa;
    margin-bottom: 25px;
    font-size: 24px;
}



























////////////////////////////////////////////////////////////////////
Box Model:
1. Content area - actual content
2. Padding -  top, right, bottom, left  (clockwise order)
3. Border -  top, right, bottom, left 
4. Margin -  top, right, bottom, left 

/*

Full box width = content area width + margin-left + margin-right + border-left + border-right + padding-left + padding-right

*/

Padding: space 
/* short hand */
h2 {
    padding: 6px   3px    0     0; /* top right bottom left  - clockwise order */
}

Resize the internal box size but space between the adjacent boxes won't change.

margin: space like padding.
h2 {
    margin-top: 6px;
    margin-right: 3px;
    margin-bottom: 0;
    margin-left: 0;
}

Resize the space between the adjacent boxes but internal box size won't change.


Border - apart from space you can also set color and border style.

h2 {
    border-width: 6px;  /* all 4 sides*/
    border-style: solid;
    border-color: black;
}

Creating borders has a shortcut version
h2 {
    border: 6px   solid   black; /* width   style   color*/
}

For just one side:
h2 {
    border-bottom: 6px   solid   black;
}


Resetting browser default style:

html, body, h1, h2, 
h3, p, ol, ul, li, a {
    padding: 0;
    border: 0;
    margin: 0;
}



<link type="text/css" rel="stylesheet" href="main.css">

/*

Note: 
rel - relation
Just like <a> </a> but <link> doesn't have end tag like - </link>.

<img> is an empty tag. That is NO ending tag </img>
<img src="somePath" alt="someDesc">


*/













/////////////////////////////////////////////////
<h1> to <h6>  from more important to less important.

<body> </body> element : Any content that appears on a web page should be in between <body> </body>
<head> </head>: Non-visible stuff goes in the <head> tag.
<a> </a>: clickable link
href = "http://a.com/b.html" - page to open
target = "_blank"  - href should open a page in a new tab/window
target = "_self"   - (default )href replace the current with new page




